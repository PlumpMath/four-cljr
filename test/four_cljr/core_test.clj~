(ns four-cljr.core-test
  (:use clojure.test
        four-cljr.core))
;; 1
;; Elementory
;; This is a clojure form. Enter a value which will make the form to evaluate to true. Dont over think it! If you are confused, see the getting started page.
;; Hint: true is equal to true.

(deftest test-1
  (testing "Nothing but the truth"
    (is (= true true))))

;; 2
;; Elementary
;; If you are not familiar with polish notation, simple arithmetic might seem confusing.
;; Note: Enter only enough to fill in the blank (in this case, a single number) - do not retype the while problem.

(deftest test-2
  (testing "Simple Math"
    (is (= (- 10 (* 2 3)) 4))))

;; 3
;; Elementary
;; Clojure strings are Java strings. This means that you can use any of the Java string methods on Clojure strings.
(deftest test-3
  (testing "Intro to Strings"
    (is (= "HELLO WORLD" (.toUpperCase "hello world")))))



;; 173
;; Easy
;; Sequential destructuring allows you to bind symbols to parts of sequential things (vectors, lists, seqs, etc.)
;; (let [bindings* ] exprs*)
;; Complete the bindings so all let-parts evaluate to 3.

(deftest test-173
  (testing "Intro to Destructuring 2"
    (is (= 3
           (let [[f a] [+ (range 3)]] (apply f a))
           (let [[[f a] b] [[+ 1] 2]] (f a b))
           (let [[f a] [inc 2]] (f a)))))) 

